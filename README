################################################################################
#  Tufts University COMP 131, Summer 2020                                      #
#  README                                                                      #
#  By:          Sawyer Bailey Paccione                                         #
#  Completed:                                                                  #
#                                                                              #
#  Description: A README file contains information about other files in a      #
#               directory or archive of compute software.                      #
################################################################################
            
################################################################################
##                              Compile and Use                               ##
################################################################################

Run Terminal Based:
    $ python solver.py [--board board_file.txt]

Run GUI Sudoku:
    $ python sudoku.py [--board board_file.txt]

Examples:
    $ python solver.py --board easy_puzzle.txt

    $ python sudoku.py --board evil_puzzle.txt

If the --board flag is not provided the program is run with easy_puzzle

Notes:  I can't get conflict-directed back-jumping to work with find_empty_basic
        sorry

################################################################################
##                              Program Purpose                               ##
################################################################################

Traditional Sudoku is a 9 X 9 puzzle grid made up of nine 3 X 3 regions. Each 
region, row and column, contains nine cells each. The numbers shown on the 
board are given and cannot be changed. The object of the puzzle is to place the 
numbers 1 to 9 in the empty cells so that each row, each column and each 3 X 3 
region contains the same number only once. 

The purpose of this program is to solve this Constraint Satisfaction Problem.
This was completed using backtracking, forward checking and conflict directed
back-jumping. The text based version simply uses conflict-directed back-jumping.
In the GUI version you can specify both the solving algorithm and the search
heuristic. 

################################################################################
##                           Acknowledgements                                 ##
################################################################################
        
I am new to python, I have a decent amount of experience coding in C, C++. As
such, I visited various websites in trying to determine the best ways to 
implement ideas that would be easy for me to implement in C++. In learning to 
create a graphical user interface I followed the tutorial at 
http://newcoder.io/gui. 

In creating the RadioBar, I learned about Radio Buttons I followed 
https://www.python-course.eu/tkinter_radiobuttons.php. I also followed
the same website in creating the CheckButton.

The world_hardest.txt sudoku board is from 
https://www.conceptispuzzles.com/index.aspx?uri=info/article/424#:~:text=In
%202012%2C%20Finnish%20mathematician%20Arto,would%20%22score%20an%20eleven%22.

################################################################################
##                                  Files                                     ##
################################################################################

SudokuBoard.py:
    -   The representation of the Sudoku by a 2D array of int, where 0 
        represents an empty cell 

solver.py 
    -   Holds the various search algorithms for solving the sudoku CSP

sudoku.py:
    -   Program that runs the program UI

SudokuUI.py:
    -   The Graphical User Interface (GUI) representation of a Sudoku Board. It 
        can be played simply or it can be solved with a combination of 
        Algorithms and Search Heuristics. The Tkinter UI, responsible for 
        drawing the board and accepting user input.

SudokuError.py:
    -   Throw exceptions when there is an error input

RadioBar.py:
    -   A collection of Radio Buttons all indicating various options 
        for the same value

evil_puzzle.txt:
    -   Text file representation of the evil puzzle given in class

easy_puzzle.txt:
    -   Text file representation of the easy puzzle given in class 

blank_puzzle.txt:
    -   Text file representation of an empty board with all blanks spaces 

README

################################################################################
##                            Other Data Structures                           ##
################################################################################
List
    - A collection which is ordered and changeable. Allows duplicate members.

################################################################################
##                                Dependencies                                ##
################################################################################
Tkinter:
    - The tkinter package (“Tk interface”) is the standard Python interface to 
      the Tk GUI toolkit. Both Tk and tkinter are available on most Unix 
      platforms, as well as on Windows systems. (Tk itself is not part of 
      Python; it is maintained at ActiveState.)

argparse:
    - The argparse module makes it easy to write user-friendly command-line 
      interfaces. The program defines what arguments it requires, and argparse 
      will figure out how to parse those out of sys.argv. The argparse module 
      also automatically generates help and usage messages and issues errors 
      when users give the program invalid arguments.
################################################################################
##                                  Testing                                   ##
################################################################################